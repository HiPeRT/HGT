#ifndef hgr_H
#define hgr_H
#include <stdio.h>
#include <ptask.h>
#include <string.h>
#include "pmutex.h"

#define MAXCYCLES 10000
#define nExperiments 10000

extern pthread_mutex_t premMutex;

extern char * rt_task_name;

typedef struct 
{
	char data_granularity[2];
	int access_type; // 0 = PREM, 1 = sparse access 
	int step;
	int stride;
	long int data_size;
	volatile char *char_data_ptr;     //1B
	volatile int  *int_data_ptr;      //4B
	volatile double *double_data_ptr;     //8B
	volatile long double *long_double_data_ptr; //16B
} memory_access_t;

unsigned long int * random_generator(long int limit, long int size);

unsigned long int * stride_generator(int stride, long int size);

int hgr_task_creator(tspec period,tspec rdline,int priority,int processor,int act_flag,void* name_task);

void hgr_wait_for_period();

void hgr_init_dependency(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);

void hgr_destroy_dependency(pthread_mutex_t *mutex);

void hgr_wait_dependency(pthread_mutex_t *mutex);

void hgr_release_dependency(pthread_mutex_t *mutex);

void hgr_exit();

long int calc_data_size(long int size,char * data_granularity);

/*This function returns the time taken to execute a 'for' for MAXCYCLES*/
double hgr_bench_computer();

//This function calculates the num. of computation cycles
void hgr_load_computation(double wcet_per_task[],int nElements,long int cycle_per_task[]);

memory_access_t * hgr_load_mem(long int data_size, char *data_granularity, int type, int step,int stride);

//PREM: Memory phase
void hgr_prem_memphase(memory_access_t *data);
  
//PREM: Computation phase
void hgr_compute_task(long int ncycles);

//SPARSE: Memory & Computation phase
void hgr_compute_sparse_task (memory_access_t *data, unsigned long int ncycles);

int hgr_pthread_join(pthread_t thread);

int hgr_pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);

void hgr_ptask_init(int policy, global_policy global, sem_protocol protocol);

double clockCall();

double forCall();

#endif



