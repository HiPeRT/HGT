#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include "_hgr.h"

int hgr_task_creator(tspec period,tspec rdline,int priority,int processor,int act_flag,void* name_task){
	tpars tparam = TASK_SPEC_DFL;
	tparam = (tpars) {
		.period=period, 
		.rdline=rdline,
		.priority = priority, .processor = processor,
		.act_flag = act_flag,
		.measure_flag=1
	};
	int index = ptask_create_param(name_task, &tparam);;
	return index;
}

long int calc_data_size(long int size,char * data_granularity){
	long int data_size=size;
	if(!strcmp(data_granularity,"KB"))
		data_size=data_size*1024;
	else if(!strcmp(data_granularity,"MB"))
		data_size=data_size*1024*1024;
	else if(!strcmp(data_granularity,"GB"))
		data_size=data_size*1024*1024*1024;
	return data_size;
}

double clockCall(){
	struct timespec tstart={0,0}, tend={0,0};
	double timeTaken;
	clock_gettime(CLOCK_MONOTONIC, &tstart);
	clock_gettime(CLOCK_MONOTONIC, &tend);
	timeTaken=(( ((double)tend.tv_sec + 1.0e-9*tend.tv_nsec) - ((double)tstart.tv_sec + 1.0e-9*tstart.tv_nsec)))*1000;
	return timeTaken;
}

double forCall(){
	int i=0;
	double timeClock;
	struct timespec tstart={0,0}, tend={0,0};
	clock_gettime(CLOCK_MONOTONIC, &tstart);
	for(i=0;i<1;i++);
	clock_gettime(CLOCK_MONOTONIC, &tend);
	timeClock=((((double)tend.tv_sec + 1.0e-9*tend.tv_nsec) - ((double)tstart.tv_sec + 1.0e-9*tstart.tv_nsec)))*1000;
	return timeClock;
}

/*This function returns the time taken to execute a 'for' for MAXCYCLES*/
double hgr_bench_computer(){
	double time[nExperiments];
	int j=0,i=0;
	struct timespec tstart={0,0}, tend={0,0};
	double avgExecutionTime=0;
	double timeClock=clockCall();
	double forTime=forCall();

	for(j=0;j<nExperiments;j++){
		clock_gettime(CLOCK_MONOTONIC, &tstart);
		for (i=0;i<MAXCYCLES;i++);
		clock_gettime(CLOCK_MONOTONIC, &tend);
		time[j]=((( ((double)tend.tv_sec + 1.0e-9*tend.tv_nsec) - ((double)tstart.tv_sec + 1.0e-9*tstart.tv_nsec)))*1000)-timeClock-(forTime-timeClock);
		avgExecutionTime+=time[j];
	}
	avgExecutionTime=avgExecutionTime/nExperiments;
	//printf("AVG Execution time - For %d cycles: %.5f miliseconds\n",MAXCYCLES,avgExecutionTime);
	return avgExecutionTime;
}

//This function calculates the num. of computation cycles
void hgr_load_computation(double wcet_per_task[],int nElements,long int cycle_per_task[]){
	int i;
	double avg=hgr_bench_computer();

	for(i=0;i<nElements;i++){
		cycle_per_task[i]=(long int)(((double)wcet_per_task[i]*(double)MAXCYCLES)/(double)avg);
	}
}

memory_access_t * hgr_load_mem(long int data_size, char *data_granularity, int type,int step,int stride){
	memory_access_t *mem_data=(memory_access_t *) malloc (sizeof(memory_access_t));
	(*mem_data).access_type = type; 
	(*mem_data).step = step; 
	(*mem_data).data_size = calc_data_size(data_size,data_granularity);
	(*mem_data).stride = stride;

	strcpy((*mem_data).data_granularity,data_granularity);
	if(step==1){
		(*mem_data).char_data_ptr   = (char *)malloc(sizeof(char)*(((*mem_data).data_size)/step));
	}else if(step==4){
		(*mem_data).int_data_ptr    = (int *)malloc(sizeof(int)*(((*mem_data).data_size)/step));
	}else if(step==8){
		(*mem_data).double_data_ptr   = (double *)malloc(sizeof(double)*(((*mem_data).data_size)/step));
	}else if(step==16){
		(*mem_data).long_double_data_ptr = (long double *)malloc(sizeof(long double)*(((*mem_data).data_size)/step));
	}else{		
		(*mem_data).char_data_ptr   = (char *)malloc(sizeof(char)*(((*mem_data).data_size)/step)); //PREM
	}
	return mem_data;
}



//This function generates a size number of randoms within limit value
unsigned long int * random_generator(long int limit, long int size) {
	srand((unsigned)time(NULL));
	unsigned long int *random_pointer=(unsigned long int *) malloc (sizeof(unsigned long int)*size);
	int divisor = RAND_MAX/(limit+1);
	int randVal,i;
	for(i=0;i<size;i++){
		do { 
			randVal = rand() / divisor;
		} while (randVal > limit);
		random_pointer[i]=randVal;
	}
	return random_pointer;
}

//This function generates the stride values
unsigned long int * stride_generator(int stride, long int size) {
	unsigned long int i;
	unsigned long int *strides=(unsigned long int *) malloc (sizeof(unsigned long int)*size);

	for(i=0;i<size;i++)
		strides[i]=(i*stride)%size;
	
	return strides;
}

/*Wrappers*/
int hgr_pthread_join(pthread_t thread){
	return pthread_join(thread, 0);
}

int hgr_pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg){
	return pthread_create(thread, NULL, start_routine, arg);
}

void hgr_ptask_init(int policy, global_policy global, sem_protocol protocol){
	ptask_init(policy, global, protocol);
}

void hgr_exit(){
	pthread_exit(NULL);
}

void hgr_wait_for_period (){
	ptask_wait_for_period();
}

void hgr_init_dependency(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr){
	pthread_mutex_init(mutex, NULL);
}

void hgr_destroy_dependency(pthread_mutex_t *mutex){
	pthread_mutex_destroy(mutex);
}

void hgr_wait_dependency(pthread_mutex_t *mutex){
	pthread_mutex_lock(mutex);	
}

void hgr_release_dependency(pthread_mutex_t *mutex){
	pthread_mutex_unlock(mutex);	
}


