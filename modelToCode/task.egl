[%
var gs: DagSet := DagSet.allInstances().at(0);
var mutexTask: String;
var NUM_THREADS: Integer;
var i: Integer;
var mutex: String;
var lastNode: Integer;
mutex=""; 

for (dag in gs.dagCollection.at(index)){ 
	for (edge in dag.edge){ 
		mutex=mutex+edge.name;
	if (hasMore)
		mutex=mutex+",";
	}

%]
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include "_hgr.h"

pthread_mutex_t [%=mutex%];
long int [%=dag.name%]_cycle_per_task[[%=dag.node.size()%]];
memory_access_t *[%=dag.name%]_data[[%=dag.node.size()%]];


void [%=dag.name%]_pre_load_tasks(){
	double wcet_per_task[[%=dag.node.size()%]];
	[%i=0;for (task in dag.node){%] 	
	wcet_per_task[[%=i%]]=[%=task.miet  %];
	//create memory_access_t struct (data_size, data_granularity, memory_access type (PREM,sparse), step, stride)
	[%=dag.name%]_data[[%=i%]]=hgr_load_mem([%=task.mem_access%],"[%=task.mem_unit%]",[%=dag.mem_type.value%],[%=dag.step%],[%=dag.stride%]);
	[%i++;}%]
		
	hgr_load_computation(wcet_per_task,[%=dag.node.size()%],[%=dag.name%]_cycle_per_task);
}

void [%=dag.name%]_mutexCreate(){	
	[%for (edge in dag.edge){%]
	hgr_init_dependency(&[%=edge.name%],NULL);
	hgr_wait_dependency(&[%=edge.name%]);	
	[%}%]
}

void [%=dag.name%]_mutexDestroy(){
	[%for (edge in dag.edge){%]
	hgr_destroy_dependency(&[%=edge.name%]);
	[%}%]
}

[%i=0;for (task in dag.node){%]
void *[%=task.name%](){
[%if(dag.mem_type.name="prem"){%]
[%=prem_memory(dag,task,i)%]
[%}else {%]
[%=sparse_memory(dag,task,i)%]
[%}%]
	hgr_exit();
	return 0;
}
[%i++;}%]

void [%=dag.name%](){
	[%=dag.name%]_pre_load_tasks();

	while(1){
		pthread_t threads[[%=dag.node.size%]];
		[%=dag.name%]_mutexCreate();
		[%i=0;
		for (node in dag.node){%]  
		hgr_pthread_create(&threads[[%=i%]], NULL, &[%=node.name%], (void *)[%=i%]);[%i++;}%]
		[%i=0;
		for (node in dag.node){%]  
		hgr_pthread_join(threads[[%=i%]]);[%i++;}
		%]
		
		
		[%=dag.name%]_mutexDestroy();
		hgr_wait_for_period();
	}
}

[%}%]

[%
@template
operation prem_memory(dag:Dag,task:Node,i:Integer){%]
	[%var mutexTask:String;%]
	//printf("Hi im the node [%=task.name%]\n");  //[%=task.comment%]
	
	hgr_prem_memphase([%=dag.name%]_data[[%=i%]]); //Mem phase

	
	[%for (edge in dag.edge){
		if(edge.trg.name=task.name){
			mutexTask=edge.name;%]
	hgr_wait_dependency(&[%=mutexTask%]);
		[%}%]
	[%}%]
	hgr_compute_task([%=dag.name%]_cycle_per_task[[%=i%]]); //Computation phase
	[%for (edge in dag.edge){
		if(edge.src.name=task.name){
			mutexTask=edge.name;%]
	hgr_release_dependency(&[%=mutexTask%]);
		[%}%]
	[%}%]
[%}

@template
operation sparse_memory(dag:Dag,task:Node,i:Integer){%]
	[%var mutexTask:String;%]
	//printf("Hi im the node [%=task.name%]\n");  //[%=task.comment%]

	[%for (edge in dag.edge){
		if(edge.trg.name=task.name){
			mutexTask=edge.name;%]
	hgr_wait_dependency(&[%=mutexTask%]); 
		[%}%]
	[%}%]
	
	hgr_compute_sparse_task([%=dag.name%]_data[[%=i%]],[%=dag.name%]_cycle_per_task[[%=i%]]); //Mem & Computation phase
	
	[%for (edge in dag.edge){
		if(edge.src.name=task.name){
			mutexTask=edge.name;%]
	hgr_release_dependency(&[%=mutexTask%]);
		[%}%]
	[%}%]
[%}%]


